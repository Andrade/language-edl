# Copyright (c) 2019, Daniel Andrade
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

name: 'Enclave Definition Language'
scopeName: 'source.edl'
type: 'tree-sitter'
parser: 'tree-sitter-edl'

fileTypes: ['edl']

scopes:
	'source_file': 'source.edl'
	'comments': 'comment.block'

	'"from"': 'keyword.control.directive'
	'"import"': 'keyword.control.directive'
	'"include"': 'keyword.control.directive'
	'header_name': 'string.quoted.other'

	'''
	"enclave",
	"trusted",
	"untrusted"
	''': 'keyword.control.directive'

	'''
	import_list > identifier,
	ecall_definition > identifier,
	ocall_definition > identifier,
	untrusted_suffix_allow > identifier
	''': 'entity.name.function'

	'''
	trusted_prefix_public,
	untrusted_suffix_allow > "allow",
	suffix_propagate_errno,
	suffix_transition_using_threads
	''': 'keyword.control'

	#'_pointer_attributes': 'variable.other.member'
	'''
	"in",
	"out",
	"user_check",
	"string",
	"wstring",
	"size",
	"count",
	"isary",
	"isptr",
	"readonly"
	''': 'variable.other.member'

	'type_qualifier': 'storage.modifier'

	'type_specifier': 'support.storage.type'

	'''
	"enum",
	"struct",
	"union"
	''': 'keyword.control'

	#'void_type': 'support.storage.type'
	'"void"': 'support.storage.type'

	'number': 'constant.numeric.decimal'

	'";"': 'punctuation.terminator.statement'
	'"["': 'punctuation.definition.begin.bracket.square'
	'"]"': 'punctuation.definition.end.bracket.square'
	'","': 'punctuation.separator.delimiter'
	'"{"': 'punctuation.section.block.begin.bracket.curly'
	'"}"': 'punctuation.section.block.end.bracket.curly'
	'"("': 'punctuation.section.parens.begin.bracket.round'
	'")"': 'punctuation.section.parens.end.bracket.round'

	'"*"': 'storage.modifier'
	'"="': 'keyword.operator'

folds: [
	type: 'comment'
]

comments:
	start: '// '
